from customtkinter import *
import random

class Game:
    def __init__(self):
        self.window = CTk()
        self.window.title('Крестики нолики 2.0 by Burickij Kirill')
        self.window.geometry('500x600')
        self.board = [[' ' for _ in range(3)] for _ in range(3)]
        self.gamer = 'X'
        self.bot = 'O'
        self.buttons = []
        self.count_clicks = 0
        self.label = CTkLabel(self.window, text='Начало игры!', text_color='Black', font=('Arial', 20))
        self.label.grid(row=3, column=0, columnspan=3)
        self.lr = CTkButton(self.window, text='Начать заново', text_color='Black', fg_color='Lightgrey', hover_color='Darkgrey',
                            font=('Arial', 20), command=self.restart_game)
        self.lr.grid(row=4, column=0, columnspan=3)
        self.lr.grid_forget()
        for c in range(3): self.window.columnconfigure(index=c, weight=1)
        for r in range(5): self.window.rowconfigure(index=r, weight=1)
        for i in range(3):
            row = []
            for j in range(3):
                button = CTkButton(self.window, text=' ', text_color='Black', fg_color='White', hover_color='Darkgrey'
                                   ,font=('Arial', 100), command=lambda x=i, y=j: self.move(x, y) and self.button_click())
                button.grid(row=i, column=j, padx=1, pady=1, sticky='nswe')
                row.append(button)
            self.buttons.append(row)

    def move(self, x, y):
        if self.board[x][y] == ' ':
            self.buttons[x][y].configure(text=self.gamer)
            self.board[x][y] = self.gamer
            is_full = all(row.count(' ') == 0 for row in self.board)
            if self.check_win(self.gamer):
                self.label.configure(text=f'Победил игрок!')
                self.stop_game()
                self.lr.grid(row=4, column=0, columnspan=3)
            elif is_full and not self.check_win(self.gamer) and not self.check_win(self.bot):
                self.label.configure(text='Ничья!')
                self.stop_game()
                self.lr.grid(row=4, column=0, columnspan=3)
            else:
                self.bot_move(x, y)

    def bot_move(self, x, y):
        if self.board[x][y] == self.bot and self.board[x][y] == self.gamer:
            return

        if self.board[1][1] == ' ':
            self.buttons[1][1].configure(text=self.bot)
            self.board[1][1] = self.bot
            return

        for i in range(3):
            for j in range(3):
                if self.board[i][j] == ' ':
                    self.board[i][j] = self.bot
                    if self.check_win(self.board[i][j]):
                        return (i, j, self.buttons[i][j].configure(text=self.bot), self.label.configure(text=f'Победил бот!'),
                                self.stop_game(), self.lr.grid(row=4, column=0, columnspan=3))
                    self.board[i][j] = ' '

        for i in range(3):
            for j in range(3):
                if self.board[i][j] == ' ':
                    self.board[i][j] = self.gamer
                    if self.check_win(self.board[i][j]):
                        self.board[i][j] = self.bot
                        return i, j, self.buttons[i][j].configure(text=self.bot)
                    self.board[i][j] = ' '

        angles = [(0, 0), (0, 2), (2, 0), (2, 2)]
        available_angles = [angle for angle in angles if self.board[angle[0]][angle[1]] == ' ']
        if available_angles:
            chosen_angle = random.choice(available_angles)
            self.board[chosen_angle[0]][chosen_angle[1]] = self.bot
            self.buttons[chosen_angle[0]][chosen_angle[1]].configure(text=self.bot)
            return

        for i in range(3):
            for j in range(3):
                if self.board[i][j] == ' ':
                    self.board[i][j] = self.bot
                    self.buttons[i][j].configure(text='O')
                    return
                self.board[i][j] = ' '

    def check_win(self, x):
        win_combinations = [((0, 0), (1, 0), (2, 0)),
                            ((0, 1), (1, 1), (2, 1)),
                            ((0, 2), (1, 2), (2, 2)),
                            ((0, 0), (0, 1), (0, 2)),
                            ((1, 0), (1, 1), (1, 2)),
                            ((2, 0), (2, 1), (2, 2)),
                            ((0, 0), (1, 1), (2, 2)),
                            ((2, 0), (1, 1), (0, 2))]
        for condition in win_combinations:
            if (self.board[condition[0][0]][condition[0][1]] == x and
                    self.board[condition[1][0]][condition[1][1]] == x and
                    self.board[condition[2][0]][condition[2][1]] == x):
                return True

    def stop_game(self):
        for i in range(3):
            for j in range(3):
                self.buttons[i][j].configure(state='disabled')

    def restart_game(self):
        for i in range(3):
            for j in range(3):
                self.buttons[i][j].configure(state='normal', text=' ')
        self.board = [[' ' for _ in range(3)] for _ in range(3)]
        self.lr.grid_forget()
        self.label.configure(text='Начало игры!')

    def start(self):
        self.window.mainloop()

game = Game()
game.start()
